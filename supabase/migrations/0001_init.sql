-- Core tables
create extension if not exists "pgcrypto";
create table if not exists academies (
  id bigint generated by default as identity primary key,
  name text not null,
  owner_user_id uuid not null,
  created_at timestamptz default now()
);

create table if not exists profiles (
  user_id uuid primary key,
  academy_id bigint references academies(id),
  role text check (role in ('ADMIN','INSTRUCTOR','ATHLETE')) default 'ATHLETE',
  phone text,
  created_at timestamptz default now()
);

create table if not exists students (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  name text not null,
  email text,
  phone text,
  belt text,
  emergency_contact_name text,
  emergency_phone text,
  health_notes text,
  status text check (status in ('ACTIVE','INACTIVE')) default 'ACTIVE',
  photo_url text,
  created_at timestamptz default now()
);

create table if not exists plans (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  name text not null,
  price_numeric integer not null,
  period text check (period = 'MONTHLY') default 'MONTHLY',
  active boolean default true
);

create table if not exists subscriptions (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  student_id uuid references students(id),
  plan_id uuid references plans(id),
  start_date date,
  end_date date,
  status text check (status in ('ACTIVE','CANCELLED','PAUSED')) default 'ACTIVE'
);

create table if not exists invoices (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  student_id uuid references students(id),
  due_date date not null,
  amount_numeric integer not null,
  status text check (status in ('PENDING','PAID','LATE')) default 'PENDING',
  paid_at timestamptz,
  notes text,
  created_at timestamptz default now(),
  review_status text check (review_status in ('NONE','PROOF_UPLOADED','IN_REVIEW','APPROVED','REJECTED')) default 'NONE',
  reviewed_by uuid,
  reviewed_at timestamptz,
  review_reason text
);

create table if not exists attendances (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  student_id uuid references students(id),
  class_date timestamptz not null,
  class_type text,
  instructor_user_id uuid,
  source text check (source in ('QR','MANUAL')) default 'QR',
  jti text unique not null,
  created_at timestamptz default now()
);

create table if not exists student_rankings (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  student_id uuid references students(id),
  modality text default 'BJJ',
  belt text,
  degree_int integer default 0,
  changed_at timestamptz default now(),
  notes text
);

create table if not exists student_skills (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  student_id uuid references students(id),
  name text not null,
  required boolean default false,
  completed boolean default false,
  updated_at timestamptz default now()
);

create table if not exists notes (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  student_id uuid references students(id),
  title text not null,
  message text not null,
  admin_user_id uuid not null,
  created_at timestamptz default now(),
  read_at timestamptz
);

create table if not exists message_settings (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  provider text check (provider = 'WHATSAPP') default 'WHATSAPP',
  enabled boolean default false,
  from_number text,
  daily_window_start time,
  daily_window_end time
);

create table if not exists message_templates (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  event_type text not null,
  template_text text not null
);

create table if not exists message_outbox (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  to_phone text not null,
  event_type text not null,
  payload_json jsonb default '{}'::jsonb,
  scheduled_at timestamptz not null,
  sent_at timestamptz,
  provider_message_id text,
  status text check (status in ('SCHEDULED','SENT','FAILED')) default 'SCHEDULED',
  error_text text
);

create table if not exists payment_settings (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  pix_key text,
  pix_receiver_name text,
  pix_city text,
  description_prefix text,
  updated_at timestamptz default now()
);

create table if not exists invoice_pix (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  invoice_id uuid references invoices(id),
  txid varchar(25) unique not null,
  brcode_payload text not null,
  qr_svg text,
  status text check (status in ('AWAITING','PAID_MANUAL')) default 'AWAITING',
  proof_url text,
  created_at timestamptz default now()
);

create table if not exists pix_charges (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint references academies(id),
  invoice_id uuid references invoices(id),
  provider text default 'MOCK',
  provider_charge_id text,
  txid varchar(25),
  e2eid text,
  amount_numeric integer,
  status text check (status in ('CREATED','PENDING','CONCILIATED','PAID','CANCELED','EXPIRED')) default 'CREATED',
  payload_json jsonb default '{}'::jsonb,
  last_update_at timestamptz
);

create table if not exists webhook_events (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint references academies(id),
  provider text,
  event_id text unique not null,
  signature text,
  payload_json jsonb,
  processed_at timestamptz default now()
);

create table if not exists tournaments (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  name text not null,
  start_at timestamptz,
  created_at timestamptz default now()
);

create table if not exists tournament_participants (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  tournament_id uuid references tournaments(id),
  student_id uuid references students(id),
  seed_int integer
);

create table if not exists tournament_brackets (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  tournament_id uuid references tournaments(id),
  type text check (type = 'SE') default 'SE',
  json_tree json not null
);

create table if not exists tournament_matches (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  tournament_id uuid references tournaments(id),
  bracket_id uuid references tournament_brackets(id),
  round_int integer,
  position_int integer,
  a_participant_id uuid references tournament_participants(id),
  b_participant_id uuid references tournament_participants(id),
  a_score integer,
  b_score integer,
  winner_participant_id uuid references tournament_participants(id),
  started_at timestamptz,
  finished_at timestamptz
);

create table if not exists classes (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  title text not null,
  description text,
  start_time timestamptz,
  end_time timestamptz,
  instructor_user_id uuid,
  capacity integer default 10
);

create table if not exists class_reservations (
  id uuid primary key default gen_random_uuid(),
  academy_id bigint not null references academies(id),
  class_id uuid references classes(id),
  user_id uuid,
  created_at timestamptz default now()
);

-- Indexes
create index on students (academy_id);
create index on invoices (academy_id);
create index on invoices (due_date);
create index on attendances (academy_id, student_id);
create index on message_outbox (academy_id, scheduled_at);
create index on pix_charges (txid);
create index on webhook_events (event_id);
create index on tournaments (academy_id);
create index on tournament_matches (tournament_id, round_int);
create index on classes (academy_id, start_time);
create index on class_reservations (class_id, user_id);

-- RLS policies
do $$
declare
  table_name text;
  tables text[] := array[
    'students','plans','subscriptions','invoices','attendances','student_rankings','student_skills','notes',
    'message_settings','message_templates','message_outbox','payment_settings','invoice_pix','pix_charges',
    'webhook_events','tournaments','tournament_participants','tournament_brackets','tournament_matches','classes','class_reservations'
  ];
begin
  foreach table_name in array tables loop
    execute format('alter table %I enable row level security;', table_name);
    execute format('create policy %I_select on %I for select using (academy_id = (auth.jwt()->>''academy_id'')::bigint);', table_name || '_select', table_name);
    execute format('create policy %I_insert on %I for insert with check (academy_id = (auth.jwt()->>''academy_id'')::bigint);', table_name || '_insert', table_name);
    execute format('create policy %I_update on %I for update using (academy_id = (auth.jwt()->>''academy_id'')::bigint);', table_name || '_update', table_name);
    execute format('create policy %I_delete on %I for delete using (academy_id = (auth.jwt()->>''academy_id'')::bigint);', table_name || '_delete', table_name);
  end loop;
end $$;

alter table profiles enable row level security;
create policy profiles_me on profiles for select using (user_id = auth.uid() or academy_id = (auth.jwt()->>'academy_id')::bigint);
create policy profiles_update on profiles for update using (user_id = auth.uid());
create policy profiles_insert on profiles for insert with check (user_id = auth.uid());

